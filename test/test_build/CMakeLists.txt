set(NAME build_test)
project(${NAME})
set(SERVICE_LIST "MARKET_DATA" "EXECUTION_MANAGEMENT" "FIX")
set(MARKET_DATA_EXCHANGE_LIST "COINBASE" "GEMINI" "KRAKEN" "KRAKEN_FUTURES" "BITSTAMP" "BITFINEX" "BITMEX" "BINANCE_US" "BINANCE" "BINANCE_USDS_FUTURES" "BINANCE_COIN_FUTURES" "HUOBI" "HUOBI_USDT_SWAP" "HUOBI_COIN_SWAP" "OKEX" "ERISX" "KUCOIN" "KUCOIN_FUTURES" "FTX" "FTX_US" "DERIBIT" "GATEIO" "GATEIO_PERPETUAL_FUTURES" "CRYPTOCOM" "ASCENDEX")
set(EXECUTION_MANAGEMENT_EXCHANGE_LIST "COINBASE" "GEMINI" "KRAKEN" "KRAKEN_FUTURES" "BITFINEX" "BITMEX" "BINANCE_US" "BINANCE" "BINANCE_USDS_FUTURES" "BINANCE_COIN_FUTURES" "HUOBI" "HUOBI_USDT_SWAP" "HUOBI_COIN_SWAP" "OKEX" "ERISX" "KUCOIN" "FTX" "FTX_US" "DERIBIT" "GATEIO" "GATEIO_PERPETUAL_FUTURES" "CRYPTOCOM" "ASCENDEX")
set(FIX_EXCHANGE_LIST "COINBASE" "GEMINI" "FTX" "FTX_US")
set(HFFIX_INCLUDE_DIR ${CCAPI_PROJECT_DIR}/dependency/hffix/include)
foreach(SERVICE IN LISTS SERVICE_LIST)
    message(STATUS "SERVICE=${SERVICE}")
    if("${SERVICE}" STREQUAL "MARKET_DATA")
    	set(EXCHANGE_LIST ${MARKET_DATA_EXCHANGE_LIST})
    elseif("${SERVICE}" STREQUAL "EXECUTION_MANAGEMENT")
      set(EXCHANGE_LIST ${EXECUTION_MANAGEMENT_EXCHANGE_LIST})
    elseif("${SERVICE}" STREQUAL "FIX")
      set(EXCHANGE_LIST ${FIX_EXCHANGE_LIST})
    endif()
    foreach(EXCHANGE IN LISTS EXCHANGE_LIST)
        message(STATUS "EXCHANGE=${EXCHANGE}")
        set(CCAPI_CPP_TARGET_NAME "${SERVICE}__${EXCHANGE}")
        add_executable("${CCAPI_CPP_TARGET_NAME}" ${SOURCE_LOGGER} test.cpp)
        target_compile_definitions("${CCAPI_CPP_TARGET_NAME}" PRIVATE "CCAPI_ENABLE_SERVICE_${SERVICE}" "CCAPI_ENABLE_EXCHANGE_${EXCHANGE}")
        if("${SERVICE}" STREQUAL "FIX")
          message(STATUS "need hffix")
		      target_include_directories("${CCAPI_CPP_TARGET_NAME}" PRIVATE ${HFFIX_INCLUDE_DIR})
		    endif()
        if("${EXCHANGE}" MATCHES "^HUOBI" OR "${EXCHANGE}" MATCHES "^OKEX")
          message(STATUS "need zlib")
		      find_package(ZLIB REQUIRED)
		      target_link_libraries("${CCAPI_CPP_TARGET_NAME}" PRIVATE ZLIB::ZLIB)
		    endif()
    endforeach()
endforeach()
